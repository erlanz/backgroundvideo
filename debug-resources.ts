// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–°–£–†–°–û–í BUNDLE

import BackgroundVideo from './src/index';

export class ResourceDebugger {
  async debugResources() {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      const resources = await BackgroundVideo.listResources();
      
      console.log('üìÅ Bundle path:', resources.bundlePath);
      console.log('üìã –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã:', resources.allResources);
      console.log('üé¨ –í–∏–¥–µ–æ —Ä–µ—Å—É—Ä—Å—ã:', resources.videoResources);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ intro.mp4
      const introVideo = resources.videoResources.find(resource => 
        resource.includes('intro') || resource.includes('Intro')
      );
      
      if (introVideo) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª:', introVideo);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
        console.log('‚ñ∂Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ...');
        await BackgroundVideo.playVideo({ path: 'intro' });
      } else {
        console.log('‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª intro.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã:', resources.videoResources);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
  }
  
  async testDifferentPaths() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏...');
    
    const testPaths = [
      'intro',
      'intro.mp4',
      'Intro',
      'Intro.mp4',
      'INTRO',
      'INTRO.MP4'
    ];
    
    for (const path of testPaths) {
      try {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç—å: "${path}"`);
        await BackgroundVideo.playVideo({ path });
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: "${path}"`);
        break;
      } catch (error) {
        console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: "${path}" - ${error}`);
      }
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/*
const debugger = new ResourceDebugger();
await debugger.debugResources();
await debugger.testDifferentPaths();
*/

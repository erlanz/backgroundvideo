{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,eAAe,GAAG,cAAc,CAAwB,iBAAiB,EAAE;IAC/E,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,kBAAkB,EAAE,CAAC;CACnE,CAAC,CAAC;AAEH,2DAA2D;AAC3D,MAAM,sBAAsB;IAA5B;QACU,WAAM,GAAG,eAAe,CAAC;IA6BnC,CAAC;IA3BC,KAAK,CAAC,SAAS,CAAC,OAAyB;QACvC,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEvB,gEAAgE;QAChE,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YACtC,IAAI,GAAG,GAAG,MAAM,IAAI,IAAI,EAAE,CAAC;SAC5B;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAA2B;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;CACF;AAED,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,sBAAsB,IAAI,eAAe,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { BackgroundVideoPlugin } from './definitions';\n\nconst BackgroundVideo = registerPlugin<BackgroundVideoPlugin>('BackgroundVideo', {\n  web: () => import('./web').then((m) => new m.BackgroundVideoWeb()),\n});\n\n// Enhanced wrapper that handles assets path transformation\nclass BackgroundVideoWrapper {\n  private plugin = BackgroundVideo;\n\n  async playVideo(options: { path: string }): Promise<void> {\n    let { path } = options;\n    \n    // Transform assets/ paths to HTTP URLs for Capacitor web server\n    if (path.startsWith('assets/')) {\n      const origin = window.location.origin;\n      path = `${origin}/${path}`;\n    }\n    \n    return this.plugin.playVideo({ path });\n  }\n\n  async pauseVideo(): Promise<void> {\n    return this.plugin.pauseVideo();\n  }\n\n  async resumeVideo(): Promise<void> {\n    return this.plugin.resumeVideo();\n  }\n\n  async stopVideo(): Promise<void> {\n    return this.plugin.stopVideo();\n  }\n\n  async setVolume(options: { volume: number }): Promise<void> {\n    return this.plugin.setVolume(options);\n  }\n}\n\nexport * from './definitions';\nexport { BackgroundVideoWrapper as BackgroundVideo };\n"]}